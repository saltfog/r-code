[
["_main.html", "Jump Men", " Jump Men #load need libraries library(readr) library(dplyr) library(lubridate) library(geosphere) library(leaflet) library(ggplot2) #import the data set df &lt;- read.csv(&quot;~/r-code/jumpmen/CompanyData.csv&quot;,stringsAsFactors = FALSE) #lets take a look at the data frame str(df) ## &#39;data.frame&#39;: 5983 obs. of 18 variables: ## $ delivery_id : int 1457973 1377056 1476547 1485494 1327707 1423142 1334106 1311619 1487674 1417206 ... ## $ customer_id : int 327168 64452 83095 271149 122609 75169 101347 59161 55375 153816 ... ## $ jumpman_id : int 162381 104533 132725 157175 118095 91932 124897 79847 181543 157415 ... ## $ vehicle_type : chr &quot;van&quot; &quot;bicycle&quot; &quot;bicycle&quot; &quot;bicycle&quot; ... ## $ pickup_place : chr &quot;Melt Shop&quot; &quot;Prince Street Pizza&quot; &quot;Bareburger&quot; &quot;Juice Press&quot; ... ## $ place_category : chr &quot;American&quot; &quot;Pizza&quot; &quot;Burger&quot; &quot;Juice Bar&quot; ... ## $ item_name : chr &quot;Lemonade&quot; &quot;Neapolitan Rice Balls&quot; &quot;Bare Sodas&quot; &quot;OMG! My Favorite Juice!&quot; ... ## $ item_quantity : int 1 3 1 1 2 1 1 2 NA 1 ... ## $ item_category_name : chr &quot;Beverages&quot; &quot;Munchables&quot; &quot;Drinks&quot; &quot;Cold Pressed Juices&quot; ... ## $ how_long_it_took_to_order : chr &quot;00:19:58.582052&quot; &quot;00:25:09.107093&quot; &quot;00:06:44.541717&quot; &quot;&quot; ... ## $ pickup_lat : num 40.7 40.7 40.7 40.7 40.7 ... ## $ pickup_lon : num -74 -74 -74 -74 -74 ... ## $ dropoff_lat : num 40.8 40.7 40.7 40.8 40.7 ... ## $ dropoff_lon : num -74 -74 -74 -74 -74 ... ## $ when_the_delivery_started : chr &quot;2014-10-26 13:51:59.898924&quot; &quot;2014-10-16 21:58:58.65491&quot; &quot;2014-10-28 21:39:52.654394&quot; &quot;2014-10-30 10:54:11.531894&quot; ... ## $ when_the_Jumpman_arrived_at_pickup : chr &quot;&quot; &quot;2014-10-16 22:26:02.120931&quot; &quot;2014-10-28 21:37:18.793405&quot; &quot;2014-10-30 11:04:17.759577&quot; ... ## $ when_the_Jumpman_left_pickup : chr &quot;&quot; &quot;2014-10-16 22:48:23.091253&quot; &quot;2014-10-28 21:59:09.98481&quot; &quot;2014-10-30 11:16:37.895816&quot; ... ## $ when_the_Jumpman_arrived_at_dropoff: chr &quot;2014-10-26 14:52:06.313088&quot; &quot;2014-10-16 22:59:22.948873&quot; &quot;2014-10-28 22:04:40.634962&quot; &quot;2014-10-30 11:32:38.090061&quot; ... #lets check the integrity of the data missing values, etc... #is.na(df) # returns TRUE of data is missing #looks like we have some item_quantity values missing #the time stamps where imported as strings we need to convert them to a date format df$when_the_delivery_started &lt;- ymd_hms(substr(df$when_the_delivery_started,1,19)) df$when_the_Jumpman_arrived_at_pickup &lt;- ymd_hms(substr(df$when_the_Jumpman_arrived_at_pickup,1,19)) df$when_the_Jumpman_left_pickup &lt;- ymd_hms(substr(df$when_the_Jumpman_left_pickup,1,19)) df$when_the_Jumpman_arrived_at_dropoff &lt;- ymd_hms(substr(df$when_the_Jumpman_arrived_at_dropoff,1,19)) #it good to code days like monday, tuesday, etc.. into integers so we can use them numerical data. We will create new columns and #add the below values. df$wday_delivery_started &lt;- wday(df$when_the_delivery_started) df$weekend_delivery_started &lt;- ifelse(df$wday_delivery_started %in% c(1,7),1,0) df$day_delivery_started &lt;- (day(df$when_the_delivery_started)) #creat time differenc columns for the jumpman timestamps df$delivery_time &lt;- difftime(df$when_the_Jumpman_arrived_at_dropoff, df$when_the_Jumpman_left_pickup, units=&quot;hours&quot;) df$loading_time &lt;- difftime(df$when_the_Jumpman_left_pickup, df$when_the_Jumpman_arrived_at_pickup, units=&quot;hours&quot;) df$jumpman_arrival_time &lt;- difftime(df$when_the_Jumpman_arrived_at_pickup, df$when_the_delivery_started, units=&quot;hours&quot;) #delivery distance based off the lat and long to meters df$delivery_distance &lt;- 0 for(i in 1:nrow(df)) { df[i,&#39;delivery_distance&#39;] &lt;- distm(c(df[i,&quot;dropoff_lat&quot;],df[i,&quot;dropoff_lon&quot;]), c(df[i,&quot;pickup_lat&quot;],df[i,&quot;pickup_lon&quot;]), fun=distHaversine)/1609.34 } #compute the average jumpman speed and put in new column df$jumpman_avg_speed &lt;- df$delivery_distance/as.numeric(df$delivery_time) #calculate average jumpman speed to delivery df$jumpman_avg_speed &lt;- df$delivery_distance/as.numeric(df$delivery_time) #lets retreive the distinct values and discard the rest df_unique &lt;- df %&gt;% distinct(delivery_id, .keep_all = TRUE) #weekend vs weekday by dropoffs leaflet() %&gt;% setView(-73.972887,40.732828,zoom=12) %&gt;% addTiles() %&gt;% addProviderTiles(providers$CartoDB.Positron) %&gt;% addCircleMarkers(data=subset(df_unique,weekend_delivery_started==0), lat=~dropoff_lat,lng=~dropoff_lon,weight=1,radius=2,opacity=1,color=&quot;Green&quot;) %&gt;% addCircleMarkers(data=subset(df_unique,weekend_delivery_started==1), lat=~dropoff_lat,lng=~dropoff_lon,weight=1,radius=2,opacity=1,color=&quot;Red&quot;) %&gt;% addLegend(&quot;bottomleft&quot;,colors =c(&quot;Red&quot;, &quot;Green&quot;),labels= c(&quot;Weekend&quot;,&quot;Weekday&quot;),opacity = 1) #weekend vs weekday by pickup leaflet() %&gt;% setView(-73.972887,40.732828,zoom=12) %&gt;% addTiles() %&gt;% addProviderTiles(providers$CartoDB.Positron) %&gt;% addCircleMarkers(data=subset(df_unique,weekend_delivery_started==0), lat=~pickup_lat,lng=~pickup_lon,weight=1,radius=3,opacity=1,color=&quot;Orange&quot;) %&gt;% addCircleMarkers(data=subset(df_unique,weekend_delivery_started==1), lat=~pickup_lat,lng=~pickup_lon,weight=1,radius=2,opacity=1,color=&quot;Blue&quot;)%&gt;% addLegend(&quot;bottomright&quot;,colors =c(&quot;Blue&quot;, &quot;Orange&quot;),labels= c(&quot;Weekend&quot;,&quot;Weekday&quot;),opacity = 1) #unique number of customers paste(length(unique(df_unique$customer_id)),&quot; Unique Customers&quot;) ## [1] &quot;3192 Unique Customers&quot; ggplot(data.frame(as.vector(table(df_unique$customer_id)))) + geom_histogram(bins=30,aes(x=as.vector.table.df_unique.customer_id..))+ ggtitle(&quot;Customer Order Frequency - Histogram&quot;)+ xlab(&quot;Orders/Customer&quot;)+ ylab(&quot;Number of Customers&quot;) + theme_light() #vehicle usage ggplot(df_unique,aes(x=vehicle_type, 1,group=1)) + stat_summary(fun.y = sum,geom = &quot;bar&quot;)+ ggtitle(&quot;Number of Deliveries by Vehicle Type&quot;)+ xlab(&quot;Vehicle Type&quot;)+ylab(&quot;Number of Deliveries&quot;) + theme_light() #vechile usage by days of the week ggplot(df_unique,aes(x=wday(when_the_delivery_started,label=T), 1,group=vehicle_type,color=vehicle_type)) + stat_summary(fun.y = sum,geom = &quot;line&quot;,size=.5)+ ggtitle(&quot;Vehicle usage by Days of the Week&quot;)+ xlab(&quot;Days of the Week&quot;)+ylab(&quot;Number of Deliveries&quot;) + theme_light() #range of dates deliver start paste(&quot;Dates range from &quot;, min(df_unique$when_the_delivery_started), &quot; to &quot;, max(df_unique$when_the_delivery_started) ) ## [1] &quot;Dates range from 2014-10-01 00:07:58 to 2014-10-30 23:08:43&quot; #customers acquired cust_acq &lt;- df_unique %&gt;% group_by(customer_id) %&gt;% summarise(first_day=min(day(when_the_delivery_started))) ggplot(cust_acq,aes(x=first_day,y=1)) + stat_summary(fun.y=sum,geom=&quot;line&quot;, colour= &quot;blue&quot;) + ggtitle(&quot;Number of New Customers Acquired per Day&quot;)+ ylab(&quot;Number of Customers&quot;)+ xlab(&quot;Days in October 2014&quot;) + theme_light() #delivery trends ggplot(df_unique,aes(x=wday(when_the_delivery_started,label=T), 1,group=1)) + stat_summary(fun.y = sum,geom = &quot;line&quot;, colour= &quot;blue&quot;)+ ggtitle(&quot;Deliveries by Days of the Week&quot;)+ ylab(&quot;Number of Deliveries&quot;)+xlab(&quot;Days of the Week&quot;) + theme_light() #delivery time by day of the week ggplot(df_unique,aes(x=vehicle_type,y=delivery_time))+ geom_tile()+ ggtitle(&quot;Delivery Time variation across Vehicle Types&quot;)+ xlab(&quot;Vehicle Types&quot;)+ylab(&quot;Delivery Time (Hours)&quot;) + theme_light() ## Don&#39;t know how to automatically pick scale for object of type difftime. Defaulting to continuous. ## Warning: Removed 495 rows containing missing values (geom_tile). #jumpman arrival by day of the week ggplot(df_unique,aes(x=wday(when_the_delivery_started,label=T),y=delivery_time))+ geom_tile()+ ggtitle(&quot;Loading Time variation across Days of the Week&quot;)+ xlab(&quot;Days of the Week&quot;)+ylab(&quot;Delivery Time&quot;) + theme_light() ## Don&#39;t know how to automatically pick scale for object of type difftime. Defaulting to continuous. ## Warning: Removed 495 rows containing missing values (geom_tile). ggplot(df_unique,aes(x=vehicle_type,y=loading_time))+ geom_tile()+ ggtitle(&quot;Loading Time variation across Vehicle Types&quot;)+ xlab(&quot;Vehicle Types&quot;)+ylab(&quot;Loading Time (Hours)&quot;) + theme_light() ## Don&#39;t know how to automatically pick scale for object of type difftime. Defaulting to continuous. ## Warning: Removed 495 rows containing missing values (geom_tile). ggplot(df_unique,aes(x=vehicle_type,y=delivery_distance))+ geom_boxplot()+ ggtitle(&quot;Delivery Distances by Vehicle Type&quot;)+ xlab(&quot;Vehicle Type&quot;)+ ylab(&quot;Distance (Miles)&quot;) + theme_light() ggplot(df_unique,aes(x=vehicle_type,y=jumpman_avg_speed))+ geom_boxplot()+ ggtitle(&quot;Average Delivery Speed by Vehicle Type&quot;)+ xlab(&quot;Vehicle Type&quot;)+ ylab(&quot;Speed (MPH)&quot;) + theme_light() ## Warning: Removed 495 rows containing non-finite values (stat_boxplot). ggplot(df_unique,aes(x=vehicle_type,y=jumpman_avg_speed))+ geom_boxplot()+ ggtitle(&quot;Average Delivery Speed by Vehicle Type&quot;)+ xlab(&quot;Vehicle Type&quot;)+ ylab(&quot;Speed (MPH)&quot;)+ylim(0,20) + theme_light() ## Warning: Removed 508 rows containing non-finite values (stat_boxplot). "]
]
