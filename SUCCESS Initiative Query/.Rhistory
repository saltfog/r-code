library(UsingR)
install.packages("UsingR")
library(UsingR)
?father.son
plot(sheight ~ fheight, data=father.son,bty="l",pch=20)
clear
?father.son
library(UsingR)
mean(father.son)
demo()
mean(?father.son)
library(UsingR)
x=father.son$fheight
y=father.son$sheight
plot(x,y,xlab="Father's height",ylab="Son's height")
median(x)
z = father.son$sheight
median(z)
a = [father.son$sheight & father.son$fheight > 70]
[father.son$sheight & father.son$fheight > 70]
in [father.son$sheight & father.son$fheight > 70]
in [father.son$sheight] & in [father.son$height > 70]
library(UsingR)
a = [father.son$fheight > 70]
a = father.son$fheight > 70
femaleControlsPopulation <- read.table("~/Downloads/femaleControlsPopulation.csv", header=TRUE, quote="\"")
View(femaleControlsPopulation)
iris <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/bezdekIris.data"), header = FALSE)
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
install.packages("ggvis")
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
library(class)
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
summary(iris_norm)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
iris_pred
#Engaged Particpation 8 years of data
#DDIV
data_2013=read.csv("07-15 tobit data.csv",header=TRUE)
head(data_2013)
str(data_2013)
names(data_2013)
provider <- split(data_2013, data_2013$short_name)
hist(provider$DDIV$percen, breaks=10,
#probability = TRUE,
col="lightblue",
labels=TRUE,
ylim=c(0, 4000),
xlab="Months Served by Months Enrolled (percent)",
ylab="Exited Children",
main="Engaged Participation in Early Intervention Services for Children Exiting in SFY13
DDIV",
xaxt='n')
axis(side=1, at=seq(0,100, 10),
text(50, 3000, "Average 92.62% / Min 0% / Max 100%",
cex = .8))
text(50, 2500, "Total Exited: 20744",
cex = .8)
#Normal Distribution
mean(provider$DDIV$percent)
sd(provider$DDIV$percent)
data_2013=read.csv("07-15 tobit data.csv",header=TRUE)
setwd("~/r-code/SUCCESS Initiative Query")
data_2013=read.csv("07-15 tobit data.csv",header=TRUE)
head(data_2013)
str(data_2013)
names(data_2013)
provider <- split(data_2013, data_2013$short_name)
hist(provider$DDIV$percen, breaks=10,
#probability = TRUE,
col="lightblue",
labels=TRUE,
ylim=c(0, 4000),
xlab="Months Served by Months Enrolled (percent)",
ylab="Exited Children",
main="Engaged Participation in Early Intervention Services for Children Exiting in SFY13
DDIV",
xaxt='n')
axis(side=1, at=seq(0,100, 10),
text(50, 3000, "Average 92.62% / Min 0% / Max 100%",
cex = .8))
text(50, 2500, "Total Exited: 20744",
cex = .8)
#Normal Distribution
mean(provider$DDIV$percent)
sd(provider$DDIV$percent)
setwd("~/r-code")
data <- read.csv("pharynx.csv", header = TRUE)
pharynx <- read.csv("pharynx.csv", header = TRUE)
pharynx$TIME1<-factor(NA,levels=c("Greater than or equal to 500", "less than 500 days"))
pharynx$TIME1[pharynx$TIME>=500]<-"Greater than or equal to 500"
summary(pharynx$TIME)
pharynx$days500<-factor(pharynx$days500,levels=c("yes","no"))
prop.test(table(pharynx$days500),0.50,correct=F)
summary(pharynx$TIME)
pharynx <- read.csv("pharynx.csv", header = TRUE)
summary(pharynx$TIME)
pharynx$TIME1<-factor(NA,levels=c("Greater than or equal to 500", "less than 500 days"))
pharynx$TIME1[pharynx$TIME>=500]<-"Greater than or equal to 500"
pharynx$TIME1[pharynx$TIME<500]<-"less than 500 days"
table(pharynx$TIME1)
pharynx$days500<-factor(pharynx$days500,levels=c("yes","no"))
pharynx$TIME1<-factor(pharynx$TIME1,levels=c("yes","no"))
prop.test(table(pharynx$TIME1),0.50,correct=F)
table(pharynx$TIME1)
pharynx <- read.csv("pharynx.csv", header = TRUE)
summary(pharynx$TIME)
pharynx$TIME1<-factor(NA,levels=c("Greater than or equal to 500", "less than 500 days"))
pharynx$TIME1[pharynx$TIME>=500]<-"Greater than or equal to 500"
pharynx$TIME1[pharynx$TIME<500]<-"less than 500 days"
table(pharynx$TIME1)
table(pharynx$TIME1), null probability 0.5
prop.test(table(pharynx$TIME1),0.50,correct=F)
prop.test(table(pharynx$TIME1),0.50,correct=F)
table<-table(pharynx$TX,pharynx$time500) prop.table(table, margin=1)
table(pharynx$TIME1)
chisq.test(pharynx$TX,pharynx$time500,correct=F)
table <-table(pharynx$TX,pharynx$time500)
table
table<-table(pharynx$TX,pharynx$time500)
table<-table(pharynx$TIME1,pharynx$time500)
table<-table(pharynx$TX,pharynx$TIME1)
table
addmargins(table)
prop.table(table, margin=1)
chisq.test(pharynx$TX,pharynx$TIME1,correct=F)
treat.test<-chisq.test(pharynx$TX,pharynx$TIME1,correct=F)
treat.test$expected
chisq.test(pharynx$T_STAGE,pharynx$TIME1)
treat.test$expected
chisq.test(pharynx$T_STAGE,pharynx$TIME1)
stage.test<-chisq.test(pharynx$T_STAGE,pharynx$TIME1)
stage.test$expected
chisq.test(pharynx$T_STAGE,pharynx$TIME1, correct = FALSE)
fisher.test(pharynx$T_STAGE,pharynx$TIME1)
1-pchisq(1,df=1) 0.3173
pchisq(1,df=1) 0.3173
1-pchisq(3,df=1) 0.0833
pchisq(1,df=1) 0.3173
pchisq(1,df=1)
1-pchisq(1,df=1)
1-pchisq(5,df=2)
rmarkdown::shiny_prerendered_clean('pharynx.R')
chisq.test(pharynx$T_STAGE,pharynx$TIME1, correct=F)
stage.test<-chisq.test(pharynx$T_STAGE,pharynx$TIME1)
stage.test$expected
chisq.test(pharynx$T_STAGE,pharynx$TIME1, correct=F)
install.packages("pdftools")
data(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
install.packages(c("cluster", "DBI", "lattice", "shiny", "survival", "tibble"))
library(help = "datasets")
volcano <- data(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
library(help = "datasets")
data(volcano)
data(volcano)
summary(data)
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
library(help = "datasets")
setwd("~/r-code")
data(volcano)
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
install.packages("surface")
install.packages("surveybootstrap")
require(grDevices); require(graphics)
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
title(main = "volcano data: filled contour map")
data(volcano)
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
data(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
install.packages("triangle")
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
surfaceTriangles(xx, yy, zz, color="cyan2")
install.packages("misc3d")
data(volcano)
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
require(grDevices); require(graphics)
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
title(main = "volcano data: filled contour map")
drawScene(surfaceTriangles(seq(-1,1,len=30), seq(-1,1,len=30),
function(x, y) (x^2 + y^2), color2 = "green"))
dat(teapot)
data(teapot)
install.packages("contoureR")
View(volcano)
View(volcano)
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
require(grDevices); require(graphics)
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
title(main = "volcano data: filled contour map")
drawScene(surfaceTriangles(seq(-1,1,len=30), seq(-1,1,len=30),
function(x, y) (x^2 + y^2), color2 = "green"))
install.packages("rgl")
install.packages("tkrplot")
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
require(grDevices); require(graphics)
install.packages("rgl")
install.packages("MASS")
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
require(misc3d)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
drawScene(voldf, scale = FALSE)
xx <- 20 * (1:nrow(zz))
require(misc3d)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, colorConverter="heat")
})
require(misc3d)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, colorRampPalette = terrain.colors(5))
})
summary(volcano)
require(misc3d)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, colorRampPalette = terrain.colors, asp = 1))
})
require(misc3d)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, colorRampPalette(terrain.colors, asp = 1))
})
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="cyan2")
})
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color="blue")
})
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color = "green")
})
drawScene(voldf, scale = FALSE)
require(grDevices); require(graphics)
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
drawScene(voldf, scale = FALSE)
surfaceTriangles(xx, yy, zz, color = "gray")
data(volcano)
summary(volcano)
voldf <- local({
zz <- 7 * volcano
xx <- 20 * (1:nrow(zz))
yy <- 20 * (1:ncol(zz))
surfaceTriangles(xx, yy, zz, color = "gray")
})
drawScene(voldf, scale = FALSE)
surfaceTriangles(xx, yy, zz, color = "green")
setwd("~/r-code/student-academic-misconduct-study")
survey <- read.csv("SurveySP16.csv", header = TRUE)
summary(survey)
summary(survey$school.year)
summary(survey$gender)
summary(survey$consent)
summary(survey$hs)
summary(survey$exam_prep)
summary(survey$num_class)
summary(survey$gender)
summary(survey$exam_prep)
hist(survey$exam_prep)
scatter.smooth(survey$exam_prep)
boxplot(survey$exam_prep)
plot(survey$exam_prep)
summary(survey$num_class)
plot(survey$num_class)
survey <- read.csv("SurveySP16.csv", header = TRUE)
summary(survey$school.year)
summary(survey$gender)
summary(survey$num_class)
plot(survey$num_class)
SurveySP16 <- read.csv("SurveySP16.csv", header = TRUE)
SurveySP16$gender2<-SurveySP16$gender
table(SurveySP16$gender)
prop.table(GenderTable)
GenderTable<-table(SurveySP16$gender)
prop.table(GenderTable)
plot(survey$num_class)
SurveySP16$gender2<-SurveySP16$gender
table(SurveySP16$gender)
GenderTable<-table(SurveySP16$gender)
prop.table(GenderTable)
